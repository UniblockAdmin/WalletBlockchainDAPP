{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport UBToken from \"../contracts/UBToken.json\";\nimport Web3 from \"web3\";\nimport \"../App.css\";\nconst Web3Connect = () => {\n  _s();\n  const [state, setState] = useState({\n    web3: null,\n    contract: null,\n    newAccount: null\n  });\n  useEffect(() => {\n    const provider = new Web3.providers.HttpProvider(\"http://localhost:8545/\");\n    async function initializeWeb3() {\n      const web3 = new Web3(provider);\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = UBToken.networks[networkId];\n      const contract = new web3.eth.Contract(UBToken.abi, deployedNetwork.address);\n      setState({\n        web3,\n        contract\n      });\n    }\n    provider && initializeWeb3();\n  }, []);\n  return state;\n};\n_s(Web3Connect, \"9MKVTUXjuCpP+l5iJL/O4/fPE24=\");\n_c = Web3Connect;\nexport default Web3Connect;\nvar _c;\n$RefreshReg$(_c, \"Web3Connect\");","map":{"version":3,"names":["React","useState","useEffect","UBToken","Web3","Web3Connect","_s","state","setState","web3","contract","newAccount","provider","providers","HttpProvider","initializeWeb3","networkId","eth","net","getId","deployedNetwork","networks","Contract","abi","address","_c","$RefreshReg$"],"sources":["C:/Users/olavi/uniblock/WalletBlockchainApp/WalletBlockchainApp/src/Components/Web3Connect.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport UBToken from \"../contracts/UBToken.json\";\nimport Web3 from \"web3\";\nimport \"../App.css\";\n\nconst Web3Connect = () => { \n    const [state, setState] = useState({\n        web3: null,\n        contract: null,\n        newAccount: null,\n      });\n      \n      useEffect(() => {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://localhost:8545/\"\n        );\n        \n        async function initializeWeb3() {\n          const web3 = new Web3(provider);\n          const networkId = await web3.eth.net.getId();\n          const deployedNetwork = UBToken.networks[networkId];\n          \n          const contract = new web3.eth.Contract(\n            UBToken.abi,\n            deployedNetwork.address\n          );\n          \n          setState({ web3, contract });\n        }\n    \n        provider && initializeWeb3();\n      }, []);\n\n    return state;\n}\n\nexport default Web3Connect"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,2BAA2B;AAC/C,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAO,YAAY;AAEnB,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC;IAC/BQ,IAAI,EAAE,IAAI;IACVC,QAAQ,EAAE,IAAI;IACdC,UAAU,EAAE;EACd,CAAC,CAAC;EAEFT,SAAS,CAAC,MAAM;IACd,MAAMU,QAAQ,GAAG,IAAIR,IAAI,CAACS,SAAS,CAACC,YAAY,CAC9C,wBACF,CAAC;IAED,eAAeC,cAAcA,CAAA,EAAG;MAC9B,MAAMN,IAAI,GAAG,IAAIL,IAAI,CAACQ,QAAQ,CAAC;MAC/B,MAAMI,SAAS,GAAG,MAAMP,IAAI,CAACQ,GAAG,CAACC,GAAG,CAACC,KAAK,CAAC,CAAC;MAC5C,MAAMC,eAAe,GAAGjB,OAAO,CAACkB,QAAQ,CAACL,SAAS,CAAC;MAEnD,MAAMN,QAAQ,GAAG,IAAID,IAAI,CAACQ,GAAG,CAACK,QAAQ,CACpCnB,OAAO,CAACoB,GAAG,EACXH,eAAe,CAACI,OAClB,CAAC;MAEDhB,QAAQ,CAAC;QAAEC,IAAI;QAAEC;MAAS,CAAC,CAAC;IAC9B;IAEAE,QAAQ,IAAIG,cAAc,CAAC,CAAC;EAC9B,CAAC,EAAE,EAAE,CAAC;EAER,OAAOR,KAAK;AAChB,CAAC;AAAAD,EAAA,CA7BKD,WAAW;AAAAoB,EAAA,GAAXpB,WAAW;AA+BjB,eAAeA,WAAW;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}